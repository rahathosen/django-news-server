# Generated by Django 4.2.4 on 2023-09-29 14:36

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('categories', '0001_initial'),
        ('news', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('option_one', models.CharField(max_length=30)),
                ('option_two', models.CharField(max_length=30)),
                ('option_three', models.CharField(max_length=30)),
                ('option_one_count', models.PositiveIntegerField(default=0)),
                ('option_two_count', models.PositiveIntegerField(default=0)),
                ('option_three_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('end_at', models.DateTimeField()),
                ('total_view', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='WebsiteInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Website Title')),
                ('tagLine', models.TextField(blank=True, default='', verbose_name='Tag Line/ Slogan')),
                ('url', models.CharField(blank=True, default='', max_length=50, verbose_name='Website URL')),
                ('logo', models.ImageField(blank=True, default='', upload_to='website_info/logo', verbose_name='Website Logo')),
                ('favicon', models.ImageField(blank=True, default='', upload_to='website_info/icon', verbose_name='Website Favicon icon')),
                ('newsThumbnail', models.ImageField(blank=True, default='', upload_to='website_info/newsThumbnail', verbose_name='News Thumbnail')),
                ('facebook_url', models.CharField(blank=True, default='', max_length=200, verbose_name='Facebook URL')),
                ('twitter_url', models.CharField(blank=True, default='', max_length=200, verbose_name='Twitter URL')),
                ('youtube_url', models.CharField(blank=True, default='', max_length=200, verbose_name='Youtube URL')),
                ('instagram_url', models.CharField(blank=True, default='', max_length=200, verbose_name='Instagram URL')),
                ('address', models.CharField(blank=True, default='', max_length=200, verbose_name='Address')),
                ('contact1', models.CharField(blank=True, default='', max_length=20, verbose_name='Contact Nubmer 1')),
                ('contact2', models.CharField(blank=True, default='', max_length=20, verbose_name='Contact Nubmer 2')),
                ('email', models.CharField(blank=True, default='', max_length=200, verbose_name='Email Address')),
                ('whatsapp', models.CharField(blank=True, default='', max_length=200, verbose_name='Whatsapp Number')),
                ('copyright_text', models.CharField(default='', max_length=500)),
                ('about_us', ckeditor.fields.RichTextField(blank=True, default='')),
                ('contact_us', ckeditor.fields.RichTextField(blank=True, default='')),
                ('advertisement_policy', ckeditor.fields.RichTextField(blank=True, default='')),
                ('privacy_policy', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Privacy Policy / Terms of Use')),
                ('comment_policy', ckeditor.fields.RichTextField(blank=True, default='')),
                ('android_app_url', models.CharField(blank=True, default='', max_length=200)),
                ('ios_app_url', models.CharField(blank=True, default='', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_view', models.PositiveBigIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Website Info',
                'verbose_name_plural': 'Website Info',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='SectionBox',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('background_color', models.CharField(blank=True, max_length=10, verbose_name='Background Color(Must be in Hexadecimal)')),
                ('image', models.ImageField(blank=True, null=True, upload_to='sectionBox/images/webp')),
                ('title', models.CharField(max_length=50)),
                ('details', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('heighlighted', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='news.post', verbose_name='Heighlighted News')),
                ('items', models.ManyToManyField(blank=True, limit_choices_to=1, to='categories.newscategory')),
                ('items2', models.ManyToManyField(blank=True, to='categories.newssubcategory')),
                ('items3', models.ManyToManyField(blank=True, to='categories.poststag')),
                ('items4', models.ManyToManyField(blank=True, to='categories.continents')),
                ('items5', models.ManyToManyField(blank=True, to='categories.country')),
                ('items6', models.ManyToManyField(blank=True, to='categories.division')),
                ('items7', models.ManyToManyField(blank=True, to='categories.district')),
                ('items8', models.ManyToManyField(blank=True, to='categories.citycorporation')),
            ],
            options={
                'verbose_name': 'Section Box',
                'verbose_name_plural': 'Section Boxs',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='HeadLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('items', models.ManyToManyField(blank=True, limit_choices_to=10, to='news.post', verbose_name='Headlines')),
            ],
            options={
                'verbose_name': 'Headline / শিরোনাম',
                'verbose_name_plural': 'Headlines / শিরোনাম',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Cover',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('headNews', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='news.post', verbose_name='Head Line News')),
            ],
            options={
                'verbose_name': 'Cover / প্রচ্ছদ',
                'verbose_name_plural': 'Cover / প্রচ্ছদ',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='BreakingNews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('end_at', models.DateTimeField()),
                ('items', models.ManyToManyField(blank=True, limit_choices_to=5, to='news.post', verbose_name='Breaking News')),
            ],
            options={
                'verbose_name': 'Breaking News',
                'verbose_name_plural': 'Breaking News',
                'ordering': ['-updated_at'],
            },
        ),
    ]
