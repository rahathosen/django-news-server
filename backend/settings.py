"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dotenv
import cloudinary
import cloudinary.uploader
import cloudinary.api
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# mood = 'local'
# mood = 'staging'
mood = 'production'


if mood == 'production':
    msg = "Running in PRODUCTION mode"
    print('\033[93m'+msg+'\033[0m')
    print('\u001b[35m'+msg+'\u001b[0m')
    dotenv_file = os.path.join(BASE_DIR, ".env")
    if os.path.isfile(dotenv_file):
        dotenv.load_dotenv(dotenv_file)
    else:
        print("WARNING: No .env_dev file found.")

elif mood == 'staging':
    msg = "Running in DEVELOPMENT mode (staging)."
    print('\033[93m'+msg+'\033[0m')
    print('\u001b[35m'+msg+'\u001b[0m')
    dotenv_file = os.path.join(BASE_DIR, ".env_dev")
    if os.path.isfile(dotenv_file):
        dotenv.load_dotenv(dotenv_file)
    else:
        print("WARNING: No .env file found.")

elif mood == 'local':
    msg = "Running in local mode."
    print('\u001b[35m'+msg+'\u001b[0m')
    dotenv_file = os.path.join(BASE_DIR, ".env_local")
    if os.path.isfile(dotenv_file):
        dotenv.load_dotenv(dotenv_file)
    else:
        print("WARNING: No .env_local file found.")





# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5r#xglib)6ji)aztao)nc^_z6yb22!=)7vflxlmlls%au!0(7v'

# SECURITY WARNING: don't run with debug turned on in production!
if mood == 'production':
    DEBUG = True
else:
    DEBUG = True

if mood == 'production':
    ALLOWED_HOSTS = ['127.0.0.1', '.vercel.app', '*']
else:
    ALLOWED_HOSTS = ['127.0.0.1', '.vercel.app', '*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third party apps
    'graphene_django',
    'ckeditor',

    # Created apps
    'advertisement',
    'article',
    'categories',
    'homepage',
    'news',
    'reporter',
    'webInfo',
    'feature',

]
if mood == 'stging' or mood == 'local':
    INSTALLED_APPS += [
    'search',
    ]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.app'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


# for Database
DATABASES = {
    'default': {
        'ENGINE': os.environ['PGENGINE'],
        'URL': os.environ['DATABASE_URL'],
        'NAME': os.environ['PGDATABASE'],
        'USER': os.environ['PGUSER'],
        'PASSWORD': os.environ['PGPASSWORD'],
        'HOST': os.environ['PGHOST'],
        'PORT': os.environ['PGPORT'],
       
    }
}




# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
if DEBUG:
    AUTH_PASSWORD_VALIDATORS = []
else:
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Dhaka'

USE_I18N = True

USE_TZ = True

# Path where media is stored
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Base url to serve media files
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR,'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

GRAPHENE = {
    "SCHEMA": "backend.schema.schema"
}

# adding config
cloudinary.config( 
  cloud_name = os.environ['CLOUD_NAME'], 
  api_key = os.environ['API_KEY'], 
  api_secret = os.environ['API_SECRET'],
)